# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: feature_engineering_agent
# Time Created: 2025-06-09 20:50:06

def feature_engineer(data_raw):
    import pandas as pd
    import numpy as np
    from sklearn.preprocessing import LabelEncoder



    # 1. Convert Data Types
    for column in data_raw.select_dtypes(include=['object']).columns:
        data_raw[column] = pd.to_numeric(data_raw[column], errors='coerce')

    # 2. Remove Unique Categorical Features
    unique_counts = data_raw.nunique()
    data_raw = data_raw.loc[:, unique_counts != len(data_raw)]
    
    # 3. Remove Constant Features
    constant_features = [col for col in data_raw.columns if data_raw[col].nunique() == 1]
    data_raw.drop(columns=constant_features, inplace=True)

    # 4. Encode High Cardinality Categorical Features
    for column in data_raw.select_dtypes(include=['object']).columns:
        threshold = len(data_raw) * 0.05
        freq = data_raw[column].value_counts()
        data_raw[column] = data_raw[column].where(data_raw[column].map(freq) >= threshold, 'Other')

    # 5. Apply OneHotEncoding
    data_raw = pd.get_dummies(data_raw, drop_first=True)

    # 6. Leave Numeric Features Unchanged - handled by default

    # 7. Create DateTime Features
    if any(data_raw.select_dtypes(include=['datetime64[ns]']).columns):
        datetime_columns = data_raw.select_dtypes(include=['datetime64[ns]']).columns
        for dt_column in datetime_columns:
            data_raw[dt_column + '_year'] = data_raw[dt_column].dt.year
            data_raw[dt_column + '_month'] = data_raw[dt_column].dt.month
            data_raw[dt_column + '_day'] = data_raw[dt_column].dt.day
            data_raw[dt_column + '_hour'] = data_raw[dt_column].dt.hour
            data_raw[dt_column + '_minute'] = data_raw[dt_column].dt.minute
            data_raw[dt_column + '_day_of_week'] = data_raw[dt_column].dt.dayofweek

    # 8. Encoding Target Variable
    if 'clf_target_numba_6' in data_raw.columns:
        le = LabelEncoder()
        data_raw['clf_target_numba_6'] = le.fit_transform(data_raw['clf_target_numba_6'])

    # 9. Convert Boolean Features
    for column in data_raw.select_dtypes(include=['bool']).columns:
        data_raw[column] = data_raw[column].astype(int)

    # 10. Feature Analysis
    # (Assuming no further actions are needed, but can be expanded based on domain knowledge)

    # 11. Comment on None Actions
    # No actions required for non-datetime features as no transformations or encodings are omitted.

    # 12. Final Review
    # (Optional step: checking for correlations or other insights)

    return data_raw